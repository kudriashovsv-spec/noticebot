import asyncio
import json
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
DATA_FILE = "reminders.json"

def save_reminders():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        json.dump({str(k): [{"time": r["time"].isoformat(), "text": r["text"]} 
                             for r in v] 
                   for k, v in reminders.items()}, f, ensure_ascii=False, indent=4)

def load_reminders():
    global reminders
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            reminders = {}
            for k, v in data.items():
                user_reminders = []
                for r in v:
                    reminder_time = datetime.fromisoformat(r["time"])
                    reminder_text = r["text"]
                    sent = r.get("sent", False)
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    if reminder_time <= datetime.now():
                        sent = True
                    user_reminders.append({
                        "time": reminder_time,
                        "text": reminder_text,
                        "sent": sent
                    })
                reminders[int(k)] = user_reminders


# --- –ö–æ–º–∞–Ω–¥—ã /start list done help clear edit---
@dp.message(Command("start", ignore_case=True))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú, —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä: 2025-09-09 15:00, –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")

@dp.message(Command("list", ignore_case=True))
async def list_reminders(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    active = [r for r in reminders[user_id] if not r.get("sent")]
    done = [r for r in reminders[user_id] if r.get("sent")]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    active.sort(key=lambda r: r["time"])
    done.sort(key=lambda r: r["time"])

    text = ""

    if active:
        text += "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for idx, r in enumerate(active, start=1):
            text += f"{idx}. {r['time'].strftime('%Y-%m-%d %H:%M')} ‚Äî {r['text']}\n"

    if done:
        text += "\n‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for idx, r in enumerate(done, start=1):
            text += f"{idx}. {r['time'].strftime('%Y-%m-%d %H:%M')} ‚Äî {r['text']}\n"

    await message.answer(text, parse_mode="HTML")

@dp.message(Command("done", ignore_case=True))
async def done_reminder(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    active = [r for r in reminders[user_id] if not r.get("sent")]
    done = [r for r in reminders[user_id] if r.get("sent")]

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: /done 1 2")
        return

    completed = []
    for part in parts[1:]:
        try:
            idx = int(part) - 1
            if idx < 0 or idx >= len(active):
                raise IndexError
            reminder = active[idx]
            reminder["sent"] = True
            completed.append(reminder["text"])
        except (ValueError, IndexError):
            await message.answer(f"‚ùó –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {part}")

    save_reminders()

    if not completed:
        await message.answer("‚ùó –ù–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return

# --- –ö–æ–º–∞–Ω–¥–∞ /clear ---
@dp.message(Command("clear", ignore_case=True))
async def clear_done_reminders(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    before_count = len(reminders[user_id])
    reminders[user_id] = [r for r in reminders[user_id] if not r.get("sent")]
    removed_count = before_count - len(reminders[user_id])
    
    save_reminders()
    
    await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

# --- –ö–æ–º–∞–Ω–¥–∞ /edit ---
@dp.message(Command("edit", ignore_case=True))
async def edit_reminder(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    active = [r for r in reminders[user_id] if not r.get("sent")]

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer(
            "‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π! –ò—Å–ø–æ–ª—å–∑—É–π: /edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Ç–µ–∫—Å—Ç>\n"
            "–ü—Ä–∏–º–µ—Ä: /edit 1 2025-09-17 12:00, –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É"
        )
        return

    try:
        idx = int(parts[1]) - 1
        if idx < 0 or idx >= len(active):
            raise IndexError
    except (ValueError, IndexError):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return

    new_data = parts[2].strip()
    if "," not in new_data:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π! –ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú, —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return

    date_str, reminder_text = map(str.strip, new_data.split(",", 1))
    try:
        new_time = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 2025-09-17 12:00, –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    reminder = active[idx]
    reminder["time"] = new_time
    reminder["text"] = reminder_text

    save_reminders()

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n‚è∞ {new_time.strftime('%Y-%m-%d %H:%M')} ‚Äî {reminder_text}")

    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
    active = [r for r in reminders[user_id] if not r.get("sent")]
    done = [r for r in reminders[user_id] if r.get("sent")]

    text = ""
    if active:
        text += "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for i, r in enumerate(active, start=1):
            text += f"{i}. {r['time'].strftime('%Y-%m-%d %H:%M')} ‚Äî {r['text']}\n"

    if done:
        text += "\n‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for i, r in enumerate(done, start=1):
            text += f"{i}. {r['time'].strftime('%Y-%m-%d %H:%M')} ‚Äî {r['text']}\n"

    await message.answer(
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n- " + "\n- ".join(completed) + f"\n\n{text}",
        parse_mode="HTML"
    )

@dp.message(Command("help", ignore_case=True))
async def cmd_help(message: types.Message):
    await message.answer(
    "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
    "<code>/start</code> - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    "<code>/list</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
    "<code>/done</code> - –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ\n"
    "<code>/help</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    parse_mode="HTML"
    )

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(~Command("start"), ~Command("list"), ~Command("done"), ~Command("help"))
async def add_reminder(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    if "," not in text:
        await message.answer(
            "‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π! –ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú, —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
        return

    date_str, reminder_text = map(str.strip, text.split(",", 1))  # —á–∏—Å—Ç–∏–º –æ–±–µ —á–∞—Å—Ç–∏

    try:
        reminder_time = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 2025-09-16 18:00, –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
        )
        return

    if user_id not in reminders:
        reminders[user_id] = []

    reminders[user_id].append({
        "time": reminder_time,
        "text": reminder_text
    })
    save_reminders()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await message.answer(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
        f"‚è∞ –í—Ä–µ–º—è: {reminder_time.strftime('%Y-%m-%d %H:%M')}\n"
        f"üìù –¢–µ–∫—Å—Ç: {reminder_text}"
    )




# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_checker():
    while True:  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        now = datetime.now()  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        for user_id, user_reminders in reminders.items():
            for reminder in user_reminders:
                # –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—à–ª–æ –∏–ª–∏ –ø—Ä–æ—à–ª–æ
                if reminder["time"] <= now and not reminder.get("sent"):
                    await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}")
                    reminder["sent"] = True  # –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
        await asyncio.sleep(30)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    load_reminders ()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –±–æ—Ç–æ–º
    asyncio.create_task(reminder_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
