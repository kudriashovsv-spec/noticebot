import asyncio
import json
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
DATA_FILE = "reminders.json"

def save_reminders():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        json.dump({str(k): [{"time": r["time"].isoformat(), "text": r["text"]} 
                             for r in v] 
                   for k, v in reminders.items()}, f, ensure_ascii=False, indent=4)

def load_reminders():
    global reminders
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            reminders = {int(k): [{"time": datetime.fromisoformat(r["time"]), "text": r["text"]} 
                                   for r in v] 
                         for k, v in data.items()}


# --- –ö–æ–º–∞–Ω–¥—ã /start list done help ---
@dp.message(Command("start", ignore_case=True))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú, —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä: 2025-09-09 15:00, –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")

@dp.message(Command("list", ignore_case=True))
async def list_reminders(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    text = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for idx, r in enumerate(reminders[user_id], start=1):
        text += f"{idx}. {r['time']} ‚Äî {r['text']}\n"

    await message.answer(text)

@dp.message(Command("done", ignore_case=True))
async def done_reminder(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /done 1")
        return

    user_id = message.from_user.id
    idx = int(parts[1]) - 1

    if user_id not in reminders or idx < 0 or idx >= len(reminders[user_id]):
        await message.answer("‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç")
        return

    removed = reminders[user_id].pop(idx)  # —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    save_reminders()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
    await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed['text']}")

@dp.message(Command("help", ignore_case=True))
async def cmd_help(message: types.Message):
    await message.answer(
    "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
    "<code>/start</code> - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    "<code>/list</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
    "<code>/done</code> - –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ\n"
    "<code>/help</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    parse_mode="HTML"
    )

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(~Command("start"), ~Command("list"), ~Command("done"), ~Command("help"))
async def add_reminder(message: types.Message):
    user_id = message.from_user.id
    try:
        text = message.text
        date_str, reminder_text = text.split(",", 1)
        reminder_time = datetime.strptime(date_str.strip(), "%Y-%m-%d %H:%M")

        if user_id not in reminders:
            reminders[user_id] = []
        reminders[user_id].append({
            "time": reminder_time,
            "text": reminder_text.strip()
        })
        save_reminders()  # <-- –≤—ã–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {reminder_text.strip()} –Ω–∞ {reminder_time}")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú, —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")




# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_checker():
    while True:  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        now = datetime.now()  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        for user_id, user_reminders in reminders.items():
            for reminder in user_reminders:
                # –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—à–ª–æ –∏–ª–∏ –ø—Ä–æ—à–ª–æ
                if reminder["time"] <= now and not reminder.get("sent"):
                    await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}")
                    reminder["sent"] = True  # –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
        await asyncio.sleep(30)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    load_reminders ()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –±–æ—Ç–æ–º
    asyncio.create_task(reminder_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
