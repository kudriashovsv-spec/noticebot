import asyncio
import json
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
DATA_FILE = "reminders.json"

def save_reminders():
    data = {}
    for user_id, user_reminders in reminders.items():
        data[user_id] = []
        for r in user_reminders:
            data[user_id].append({
                "time": r["time"].strftime("%d.%m.%Y %H:%M"),
                "text": r["text"],
                "repeat": r.get("repeat"),  # –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                "sent": r["sent"]
            })
    with open("reminders.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_reminders():
    global reminders
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            reminders = {}
            for user_id, user_reminders in data.items():
                reminders[user_id] = []
                for r in user_reminders:
                    reminders[user_id].append({
                        "time": datetime.strptime(r["time"], "%d.%m.%Y %H:%M"),  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                        "text": r["text"],
                        "repeat": r.get("repeat"),
                        "sent": r.get("sent", False)
                    })
    except FileNotFoundError:
        reminders = {}


# --- –ö–æ–º–∞–Ω–¥—ã /start list done help clear edit---
@dp.message(Command("start", ignore_case=True))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú, —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä: 18.09.2025 15:00 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")

@dp.message(Command("list", ignore_case=True))
async def list_reminders(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    active = [r for r in reminders[user_id] if not r.get("sent")]
    done = [r for r in reminders[user_id] if r.get("sent")]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    active.sort(key=lambda r: r["time"])
    done.sort(key=lambda r: r["time"])

    # ----------------------------
    # 1Ô∏è‚É£ –†–∞–±–æ—Ç–∞–µ–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    # ----------------------------
    if active:
        buttons = [
            [InlineKeyboardButton(text=f"‚úÖ {r['time'].strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}", callback_data=f"done_{i}")]
            for i, r in enumerate(active)  # start=0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞")


    # ----------------------------
    # 2Ô∏è‚É£ –†–∞–±–æ—Ç–∞–µ–º —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    # ----------------------------
    if done:
        text_done = "‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for i, r in enumerate(done, start=1):
            text_done += f"{i}. {r['time'].strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}"
            if r.get("repeat"):
                text_done += f" üîÅ {r['repeat']}"
            text_done += "\n"
        await message.answer(text_done, parse_mode="HTML")

@dp.message(Command("done", ignore_case=True))
async def done_reminder(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    active = [r for r in reminders[user_id] if not r.get("sent")]

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: /done 1 2")
        return

    completed = []
    for part in parts[1:]:
        try:
            idx = int(part) - 1
            if idx < 0 or idx >= len(active):
                raise IndexError
            reminder = active[idx]
            reminder["sent"] = True
            completed.append(reminder["text"])
        except (ValueError, IndexError):
            await message.answer(f"‚ùó –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {part}")

    save_reminders()

    if completed:
        await message.answer("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n- " + "\n- ".join(completed))
    else:
        await message.answer("‚ùó –ù–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

# --- –ö–æ–º–∞–Ω–¥–∞ /clear ---
@dp.message(Command("clear", ignore_case=True))
async def clear_done_reminders(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    before_count = len(reminders[user_id])
    reminders[user_id] = [r for r in reminders[user_id] if not r.get("sent")]
    removed_count = before_count - len(reminders[user_id])
    
    save_reminders()
    
    await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

# --- –ö–æ–º–∞–Ω–¥–∞ /edit ---
@dp.message(Command("edit", ignore_case=True))
async def edit_reminder(message: types.Message):
    user_id = message.from_user.id

    if user_id not in reminders or not reminders[user_id]:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üì≠")
        return

    active = [r for r in reminders[user_id] if not r.get("sent")]

    if not active:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞")
        return

    parts = message.text.split(maxsplit=3)
    if len(parts) < 4:
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        text = "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for i, r in enumerate(active, start=1):
            text += f"{i}. {r['time'].strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}\n"
        text += "\n‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /edit <–Ω–æ–º–µ—Ä> –î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
        await message.answer(text, parse_mode="HTML")
        return

    try:
        idx = int(parts[1]) - 1
        if idx < 0 or idx >= len(active):
            raise IndexError
    except (ValueError, IndexError):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return

    date_str = parts[2]
    time_str = parts[3].split()[0]
    reminder_text = " ".join(parts[3].split()[1:])

    try:
        new_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 18.09.2025 12:00 –°–¥–µ–ª–∞—Ç—å –∑–≤–æ–Ω–æ–∫")
        return

    reminder = active[idx]
    reminder["time"] = new_time
    reminder["text"] = reminder_text
    save_reminders()

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n‚è∞ {new_time.strftime('%d.%m.%Y %H:%M')} ‚Äî {reminder_text}")


    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
    active = [r for r in reminders[user_id] if not r.get("sent")]
    done = [r for r in reminders[user_id] if r.get("sent")]

    text = ""
    if active:
        text += "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for i, r in enumerate(active, start=1):
            text += f"{i}. {r['time'].strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}"
            if r.get("repeat"):
                text += f" üîÅ {r['repeat']}"
            text += "\n"

    if done:
        text += "\n‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        for i, r in enumerate(done, start=1):
            text += f"{i}. {r['time'].strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}"
            if r.get("repeat"):
                text += f" üîÅ {r['repeat']}"
            text += "\n"

    await message.answer(text, parse_mode="HTML")

@dp.message(Command("help", ignore_case=True))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìñ <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
        "üëâ <code>/start</code> ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üëâ <code>/list</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üëâ <code>/done</code> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ ‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ\n"
        "üëâ <code>/clear</code> ‚Äî —É–¥–∞–ª–∏—Ç—å üóëÔ∏è –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üëâ <code>/edit</code> ‚Äî ‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "üëâ <code>/help</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "‚è∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç:\n"
        "<code>18.09.2025 10:00 –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É</code>\n\n"
        "üîÅ <b>–° –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º:</b>\n"
        "<code>18.09.2025 10:00 –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É daily</code>\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: <code>daily</code>, <code>weekly</code>, <code>monthly</code>",
        parse_mode="HTML"
    )

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(~Command("start"), ~Command("list"), ~Command("done"), ~Command("help"), ~Command("clear"), ~Command("edit"))
async def add_reminder(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip().split()  # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º

    if len(text) < 3:
        await message.answer(
            "‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π! –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è [repeat]\n"
            "–ü—Ä–∏–º–µ—Ä: 18.09.2025 10:00 –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É daily"
        )
        return

    date_str = text[0]
    time_str = text[1]
    reminder_text = " ".join(text[2:])  # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ç–µ–∫—Å—Ç

    repeat = None
    # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –Ω–∞–ø–∏—Å–∞–Ω–æ daily/weekly/monthly
    if reminder_text.split()[-1].lower() in ["daily", "weekly", "monthly"]:
        repeat = reminder_text.split()[-1].lower()
        reminder_text = " ".join(reminder_text.split()[:-1])

    try:
        reminder_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 18.09.2025 10:00 –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É")
        return

    if user_id not in reminders:
        reminders[user_id] = []

    reminders[user_id].append({
        "time": reminder_time,
        "text": reminder_text,
        "repeat": repeat,
        "sent": False
    })
    save_reminders()

    reply_text = (
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
        f"‚è∞ –í—Ä–µ–º—è: {reminder_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –¢–µ–∫—Å—Ç: {reminder_text}"
    )
    if repeat:
        reply_text += f"\nüîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {repeat}"

    await message.answer(reply_text)


# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_checker():
    while True:
        now = datetime.now()
        for user_id, user_reminders in reminders.items():
            for reminder in user_reminders:
                if reminder["time"] <= now and not reminder.get("sent"):
                    await bot.send_message(user_id, f"‚è∞ {reminder['time'].strftime('%d.%m.%Y %H:%M')} ‚Äî {reminder['text']}")
                    reminder["sent"] = True

                    # --- —Å–æ–∑–¥–∞—ë–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ---
                    repeat = reminder.get("repeat")
                    if repeat == "daily":
                        reminder["time"] += timedelta(days=1)
                        reminder["sent"] = False
                    elif repeat == "weekly":
                        reminder["time"] += timedelta(weeks=1)
                        reminder["sent"] = False
                    elif repeat == "monthly":
                        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–æ–±–∞–≤–∏–º 30 –¥–Ω–µ–π
                        reminder["time"] += timedelta(days=30)
                        reminder["sent"] = False

                    save_reminders()

        await asyncio.sleep(30)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# === –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE –ö–ù–û–ü–û–ö ===
@dp.callback_query(lambda c: c.data and c.data.startswith("done_"))
async def process_done_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id not in reminders:
        await callback_query.answer("‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    active = [r for r in reminders[user_id] if not r.get("sent")]
    index = int(callback_query.data.split("_")[1])  # –∏–Ω–¥–µ–∫—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å enumerate(active)

    if index >= len(active):
        await callback_query.answer("‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    reminder = active[index]
    reminder["sent"] = True
    save_reminders()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    active = [r for r in reminders[user_id] if not r.get("sent")]
    if active:
        buttons = [
            [InlineKeyboardButton(text=f"‚úÖ {r['time'].strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}", callback_data=f"done_{i}")]
            for i, r in enumerate(active)
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(
            "‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback_query.message.edit_text(
            "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! ‚úÖ",
            reply_markup=None
        )

    await callback_query.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")



# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    load_reminders ()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –±–æ—Ç–æ–º
    asyncio.create_task(reminder_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
